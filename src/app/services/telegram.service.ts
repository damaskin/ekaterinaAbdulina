import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from "@angular/common";
import { ITelegramWebAppData, User } from "../interface/telegram-web-app-data";
import { TranslateService } from "@ngx-translate/core";
import { ITelegramUser } from "../interface/telegram-user";
import { FirebaseService } from "./firebase.service";
import { Observable, forkJoin, of } from 'rxjs';
import { HttpClient } from "@angular/common/http";
import { WebApp } from '@twa-dev/types';

declare global {
  interface Window {
    Telegram: any;
  }
}

interface FormPhoto {
  url: string;
  fieldId: string;
  fieldLabel: string;
}

@Injectable({
  providedIn: 'root'
})
export class TelegramService {
  webAppData!: ITelegramWebAppData;
  telegramUser!: ITelegramUser;
  private botToken: string = '7704154428:AAHdcik32zNrRNqvNE4KGGUl5lzT3buYWTA'; // —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
  private telegramApiUrl = 'https://api.telegram.org/bot7704154428:AAHdcik32zNrRNqvNE4KGGUl5lzT3buYWTA';
  // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private adminUserIds: number[] = [112004130, 210311255];
  public webApp: WebApp = window.Telegram.WebApp;

  private mainButtonHandler: VoidFunction | null = null;
  private secondaryButtonHandler: VoidFunction | null = null;
  private backButtonHandler: VoidFunction | null = null;
  private settingsButtonHandler: VoidFunction | null = null;

  constructor(
    @Inject(DOCUMENT) private _document: Document,
    private translate: TranslateService,
    private readonly firebaseService: FirebaseService,
    private http: HttpClient
  ) {

    // –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –≤–Ω—É—Ç—Ä–∏ Telegram, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (this.webApp && this.webApp.initDataUnsafe && this.webApp.initDataUnsafe.user) {
      // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ, –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      this.webApp.expand();
      this.webApp.disableVerticalSwipes();
      this.webApp.isClosingConfirmationEnabled = true;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      localStorage.setItem('userData', JSON.stringify(this.webApp.initDataUnsafe.user));

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      this.translate.use(this.webApp.initDataUnsafe.user.language_code!);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –≤–Ω–µ Telegram, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –∏–∑ localStorage
    this.initUser();
  }

  init(): void {
    this.webApp.ready();
    this.webApp.expand();
  }

  cleanup(): void {
    // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (this.mainButtonHandler) {
      this.webApp.offEvent('mainButtonClicked', this.mainButtonHandler);
      this.mainButtonHandler = null;
    }
    if (this.secondaryButtonHandler) {
      this.webApp.offEvent('secondaryButtonClicked', this.secondaryButtonHandler);
      this.secondaryButtonHandler = null;
    }
    if (this.backButtonHandler) {
      this.webApp.offEvent('backButtonClicked', this.backButtonHandler);
      this.backButtonHandler = null;
    }
    if (this.settingsButtonHandler) {
      this.webApp.offEvent('settingsButtonClicked', this.settingsButtonHandler);
      this.settingsButtonHandler = null;
    }
  }

  getWebApp(): WebApp {
    return this.webApp;
  }

  getUser(): any {
    return this.webApp.initDataUnsafe.user;
  }

  getUserId(): string {
    return this.telegramUser?.id?.toString() || '';
  }

  getUserName(): string {
    return this.telegramUser?.first_name || '';
  }

  getUserPhone(): string {
    return this.telegramUser?.phone_number || '';
  }

  isAdmin(): boolean {
    const userId = this.getUserId();
    return userId === '123456789'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  }

  showMainButton(text: string, callback: VoidFunction): void {
    this.mainButtonHandler = callback;
    this.webApp.MainButton.setText(text);
    this.webApp.MainButton.show();
    this.webApp.MainButton.onClick(callback);
  }

  showSecondaryButton(text: string, callback: VoidFunction): void {
    this.secondaryButtonHandler = callback;
    this.webApp.SecondaryButton.setText(text);
    this.webApp.SecondaryButton.show();
    this.webApp.SecondaryButton.onClick(callback);
  }

  hideAllButtons(): void {
    this.hideMainButton();
    this.hideSecondaryButton();
  }

  hideMainButton(): void {
    this.webApp.MainButton.hide();
  }

  hideSecondaryButton(): void {
    this.webApp.SecondaryButton.hide();
  }

  showBackButton(callback: VoidFunction): void {
    this.backButtonHandler = callback;
    this.webApp.BackButton.show();
    this.webApp.BackButton.onClick(callback);
  }

  hideBackButton(): void {
    this.webApp.BackButton.hide();
  }

  showSettingsButton(callback: VoidFunction): void {
    this.settingsButtonHandler = callback;
    this.webApp.SettingsButton.show();
    this.webApp.SettingsButton.onClick(callback);
  }

  hideSettingsButton(): void {
    this.webApp.SettingsButton.hide();
  }

  getTelegramWebAppData(): any {
    if (this.webApp && this.webApp.initDataUnsafe) {
      return this.webApp.initDataUnsafe.user || null;
    }
    return null;
  }

  showMainBtn(text: string = 'Main button text') {
    if (this.webApp) {
      this.webApp.MainButton.setText(text);
      this.webApp.MainButton.show();
    }
  }

  hideMainBtn() {
    if (this.webApp) {
      this.webApp.MainButton.hide();
    }
  }

  getClientPlatform(): string {
    return this.webApp ? this.webApp.platform : 'unknown';
  }

  initUser(): ITelegramUser {
    const clientPlatform = this.getClientPlatform();
    const userData = localStorage.getItem('userData');

    console.log(this.webApp);

    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã),
    // –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    if (clientPlatform === 'unknown') {
      if (!userData) {
        return {} as ITelegramUser;
      } else {
        this.telegramUser = JSON.parse(userData);
        this.saveTelegramUser(this.telegramUser);
        return this.telegramUser;
      }
    } else {
      console.log(2);
      // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ Telegram, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      this.telegramUser = this.webApp?.initDataUnsafe?.user! as ITelegramUser;
      console.log(this.webApp?.initDataUnsafe?.user);

      const storedUser = sessionStorage.getItem('telegramUser');
      if (storedUser && !this.telegramUser) {
        this.telegramUser = JSON.parse(storedUser);
        return this.telegramUser;
      } else {
        this.saveTelegramUser(this.telegramUser);
        return this.telegramUser;
      }

    }
  }

  saveTelegramUser(user: ITelegramUser) {
    console.log(user);
    this.firebaseService.saveUser(user).catch((err) => {
      console.error('Error saving user:', err);
    });
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  public sendMessage(chat_id: number, category: { title: string, price: number }): Observable<any> {
    const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${this.telegramUser.first_name}!

–í–∞—à –ø–ª–∞—Ç—ë–∂ –∑–∞ —É—Å–ª—É–≥—É ¬´${category.title}¬ª, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${category.price} —Ä—É–±, —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!`;

    const body = {
      chat_id,
      text,
      parse_mode: 'HTML'
    };
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', body);
    return this.http.post(`${this.telegramApiUrl}/sendMessage`, body);
  }

  public sendMessage2(chat_id: number, category: { title: string, price: number }): Observable<any> {
    const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞!
–í–∞—à –∫–ª–∏–µ–Ω—Ç "Raynor" –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É ¬´${category.title}¬ª, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${category.price} —Ä—É–±.`;

    const body = {
      chat_id,
      text,
      parse_mode: 'HTML'
    };
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', body);
    return this.http.post(`${this.telegramApiUrl}/sendMessage`, body);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ "–æ–ø–ª–∞—á–µ–Ω"
  public sendOrderPaidNotificationsToAdmins(order: any): Observable<any[]> {
    if (!order) {
      console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return of([]);
    }

    const user = order.user || this.telegramUser;
    const category = order.category;
    const orderId = order.id;
    const paymentMethod = order.paymentMethod;
    const paymentAmount = category ? category.price : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    const text = `üîî –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
ID: ${orderId}
–£—Å–ª—É–≥–∞: ${category ? category.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–°—É–º–º–∞: ${paymentAmount} ‚ÇΩ
–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${paymentMethod || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}

üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
ID: ${user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–ò–º—è: ${user.first_name || ''} ${user.last_name || ''}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const notifications = this.adminUserIds.map(adminId => {
      const body = {
        chat_id: adminId,
        text,
        parse_mode: 'HTML'
      };
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ID ${adminId}:`, body);
      return this.http.post(`${this.telegramApiUrl}/sendMessage`, body);
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–±–ª—é–¥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    return forkJoin(notifications);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
  public sendFormNotificationToAdmins(formData: any, formId: string, orderId: string | null, categoryFields: any[]): Observable<any[]> {
    if (!formData) {
      console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return of([]);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    const { text, photos } = this.formatFormDataForTelegram(formData, orderId, categoryFields);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏–ª–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const user = this.telegramUser;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const notificationData = {
      formId,
      orderId,
      userId: user?.id,
      userName: user?.username || user?.first_name || 'Unknown',
      formText: text,
      photos: photos
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    return this.sendFormDataToAdmins(notificationData);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è Telegram
  private formatFormDataForTelegram(formData: any, orderId: string | null, fields: any[]): { text: string, photos: FormPhoto[] } {
    let result = '';
    const photos: FormPhoto[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    result += `üîπ ID –ó–∞–∫–∞–∑–∞: ${orderId || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    result += `üîπ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n`;
    result += `üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.telegramUser?.username || this.telegramUser?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n`;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const sortedFields = [...fields].sort((a, b) => a.position - b.position);
    
    sortedFields.forEach(field => {
      const value = formData[field.id];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
      if (value === null || value === undefined || !field.isActive) return;
      
      if (field.type === 'separator') {
        result += `\n${field.label}\n`;
      } else if (field.type === 'file' && Array.isArray(value) && value.length > 0) {
        result += `  - ${field.label}: ${value.length} —à—Ç.\n`;
        // –°–æ–±–∏—Ä–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–µ
        value.forEach((photo: any) => {
          if (photo.originalUrl) {
            photos.push({
              url: photo.originalUrl,
              fieldId: field.id,
              fieldLabel: field.label
            });
          }
        });
      } else if (field.type === 'checkbox') {
        result += `  - ${field.label}: ${value ? '–î–∞' : '–ù–µ—Ç'}\n`;
      } else {
        result += `  - ${field.label}: ${value}\n`;
      }
    });

    return { text: result, photos };
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Ñ–æ—Ä–º—ã
  private extractPhotoUrlsFromForm(formData: any): string[] {
    const lifePhotos = formData.style?.lifePhotos || [];
    const inspirationPhotos = formData.style?.inspirationPhotos || [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const photoUrls: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑ lifePhotos
    lifePhotos.forEach((photo: any) => {
      if (photo.originalUrl) {
        photoUrls.push(photo.originalUrl);
      } else if (photo.url) {
        photoUrls.push(photo.url);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑ inspirationPhotos
    inspirationPhotos.forEach((photo: any) => {
      if (photo.originalUrl) {
        photoUrls.push(photo.originalUrl);
      } else if (photo.url) {
        photoUrls.push(photo.url);
      }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    return photoUrls.slice(0, 10);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
  private sendFormDataToAdmins(notificationData: any): Observable<any[]> {
    const { formId, orderId, userId, userName, formText, photos } = notificationData;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    const title = `üìã ${orderId ? '–û–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–æ–≤–∞—è'} –∞–Ω–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `${title}\n\n${formText}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const notifications = this.adminUserIds.map(adminId => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const textMessage = this.http.post(`${this.telegramApiUrl}/sendMessage`, {
        chat_id: adminId,
        text,
        parse_mode: 'HTML'
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –ø–æ–ª—è–º
      if (photos && photos.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–æ–ª—è–º
        const groupedPhotos = photos.reduce((acc: { [key: string]: FormPhoto[] }, photo: FormPhoto) => {
          if (!acc[photo.fieldId]) {
            acc[photo.fieldId] = [];
          }
          acc[photo.fieldId].push(photo);
          return acc;
        }, {});

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const photoGroupRequests = Object.entries(groupedPhotos).map((entry) => {
          const [fieldId, fieldPhotos] = entry as [string, FormPhoto[]];
          const mediaGroup = fieldPhotos.map((photo, index) => ({
            type: 'photo',
            media: photo.url,
            caption: index === 0 ? fieldPhotos[0].fieldLabel : undefined
          }));

          return this.http.post(`${this.telegramApiUrl}/sendMediaGroup`, {
            chat_id: adminId,
            media: mediaGroup
          });
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å–µ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ
        return forkJoin([textMessage, ...photoGroupRequests]);
      } else {
        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return textMessage;
      }
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–¥–∏–Ω Observable
    return forkJoin(notifications);
  }
}
